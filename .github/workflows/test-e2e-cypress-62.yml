name: Test / E2E - 6.2-beta4

on:
  workflow_call:
    inputs:
      browser:
        required: false
        type: string
        default: chrome
      theme:
        required: false
        type: string
      wpVersion:
        required: false
        type: string
        default: ""
      phpVersion:
        required: false
        type: string
        default: "8.1"
    secrets:
      record-key:
        description: 'Record key for Cypress Dashboard'
        required: false

jobs:
  test_cypress_e2e:
    name: E2E Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        spec:
          - accordion.cypress.js

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Setup wp-env
      #   uses: godaddy-wordpress/setup-wp-env@v1
      #   with:
      #     core: ${{ inputs.wpVersion }}
      #     phpVersion: ${{ inputs.phpVersion }}
      #     plugins: '["."]'
      #     themes: '["https://downloads.wordpress.org/theme/go.zip"]'

      - name: Install wp-env
        shell: bash
        run: npm i -g @wordpress/env

      # Although @wordpress/env ships with a default configuration, a missing or
      # empty .wp-env.json or .wp-env.override.json file will throw a warning. We
      # provide a minimum config which includes only an empty env object, that can
      # be overridden with the Action's env input.
      - name: Set the WordPress version
        shell: bash
        run: |
          WP_ENV_CONFIG=$(jq -cnr '{}')
          WP_ENV_CONFIG=$(jq -cr '.core = "https://wordpress.org/wordpress-6.2-beta4.zip"' <<< "$WP_ENV_CONFIG")
          WP_ENV_CONFIG=$(jq -cr '.phpVersion = "${{ inputs.phpVersion }}"' <<< "$WP_ENV_CONFIG")
          WP_ENV_CONFIG=$(jq -cr '.plugins = ["."]' <<< "$WP_ENV_CONFIG")
          WP_ENV_CONFIG=$(jq --argjson arr '["https://downloads.wordpress.org/theme/go.zip"]' '.themes = $arr' <<< "$WP_ENV_CONFIG")
          jq -c . > .wp-env.override.json <<< "$WP_ENV_CONFIG"

      - name: Start wp-env
        shell: bash
        run: wp-env start

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Setup WP-CLI
        uses: godaddy-wordpress/setup-wp-cli@1

      - name: Install dependencies
        run: |
          composer install --prefer-dist --optimize-autoloader &
          yarn install --immutable

      - name: Build plugin
        run: |
          yarn build

      - name: Debugging with SSH
        uses: lhotari/action-upterm@v1

      - name: Prepare Theme
        run: |
          if [ "${{ inputs.theme }}" = "https://downloads.wordpress.org/theme/go.zip" ]; then
            cd $(wp-env install-path)/go
          else
            cd $(wp-env install-path)/tests-WordPress/wp-content/themes/twentytwentythree
          fi
          mkdir -p coblocks/icons
          echo '<svg height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"><circle class="inner-circle" cx="20" cy="20" r="8" stroke-width="8" stroke-dasharray="50.2655 50.2655" stroke-dashoffset="0"></circle></svg>' >> coblocks/icons/custom.svg

      - name: Prepare tests
        run: |
          WP_CORE_VERSION=$(wp-env run cli "wp core version")
          echo "WP_CORE_VERSION=${WP_CORE_VERSION}" >> $GITHUB_ENV
          wp-env run tests-cli "wp post generate --count=5"
          wp-env run cli "wp post generate --count=5"
          wp-env run cli "wp option update permalink_structure '/%postname%'"
          if [ "${{ inputs.theme }}" = "https://downloads.wordpress.org/theme/go.zip" ]; then
            wp-env run tests-cli "wp theme activate go"
          fi

      # Only create a new post if running the migrated specs
      - name: Create post and get ID
        if: matrix.spec == 'alert.cypress.js' || matrix.spec == 'author.cypress.js'
        run: |
          postContent=$(cat $GITHUB_WORKSPACE/.dev/tests/cypress/fixtures/${{matrix.spec}}.html)

          postId=$(wp-env run tests-cli "post create --post_type=post --post_title='${{matrix.spec}}' --porcelain --post_content='$postContent'")
          echo "postId=$postId" >> $GITHUB_OUTPUT
        id: create-post

      # Only retrieve the post ID if running the first spec
      - name: Save post ID to file
        if: matrix.spec == 'alert.cypress.js' || matrix.spec == 'author.cypress.js'
        run: |
          path="$GITHUB_WORKSPACE/.dev/tests/cypress/fixtures/${{matrix.spec}}.json"
          touch "$path"
          echo "{\"${{matrix.spec}}\": \"$(echo "${{ steps.create-post.outputs.postId }}")\"}" > "$path"

      - name: Run tests
        run: |
          CYPRESS_SPEC=$(find ./src/* -name ${{ matrix.spec }} -type f)
          echo '{"wpUsername":"admin","wpPassword":"password","testURL":"http://localhost:8889"}' | jq . > cypress.env.json
          ./node_modules/.bin/cypress verify
          ./node_modules/.bin/cypress run --browser ${{ inputs.browser }} --spec $CYPRESS_SPEC

      - name: Upload failure video
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.spec }}-fail.mp4
          path: ./.dev/tests/cypress/videos/${{ matrix.spec }}.mp4
          retention-days: 1
