workflows:
  version: 2
  main:
    jobs:
      - build:
          filters:
            tags:
              only: /^(?!canary).*$/

      # CODE LINTING
      - php:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build
      - css:
         requires:
           - build

      # UNIT TESTING
      # Support PHP Versions: http://php.net/supported-versions.php
      - unit_testing_php_56:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - php
      - unit_testing_php_73:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - php
      - unit_testing_php_74:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - php
      - js:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - build

      # END TO END TESTING
      - e2e_chrome:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - css
            - unit_testing_php_56
            - unit_testing_php_73
            - unit_testing_php_74
            - js
      - e2e_firefox:
          filters:
            tags:
              only: /^(?!canary).*$/
          requires:
            - css
            - unit_testing_php_56
            - unit_testing_php_73
            - unit_testing_php_74
            - js

      - canary-release:
          filters:
            branches:
              only: master
          requires:
            - unit_testing_php_56
            - unit_testing_php_73
            - unit_testing_php_74
            - js
      - i18n:
          filters:
            branches:
              only: master
          requires:
            - unit_testing_php_56
            - unit_testing_php_73
            - unit_testing_php_74
            - js

      - deploy:
          requires:
            - unit_testing_php_56
            - unit_testing_php_73
            - unit_testing_php_74
            - js
            # - e2e_firefox
            # - e2e_chrome
          filters:
            tags:
              only: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*)?(\+[0-9-]+(\.[0-9]+)*)?/ # Run on semantic version tags only
            branches:
              ignore: /.*/

version: 2.1

commands:

  # Find all files with the passed extension that have changed from the base branch.
  changed_files_with_extension:
    description: ""
    parameters:
      ext:
        type: string
    steps:
      - run:
          name: Get and set base branch env file
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              GH_API_ENDPOINT="${CIRCLE_PULL_REQUEST/github.com/api.github.com/repos}"
              GH_API_ENDPOINT="${GH_API_ENDPOINT/pull/pulls}"
              BASE_BRANCH=$(curl -s $GH_API_ENDPOINT | jq -r '.base.ref')
              [ "${BASE_BRANCH}" = "null" ] && BASE_BRANCH="master"
            else
              BASE_BRANCH="master"
            fi

            echo "export BASE_BRANCH=$BASE_BRANCH" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Set diff files env var
          command: |
            FILES=$(git diff HEAD..origin/$BASE_BRANCH --name-only --diff-filter=MAD "*<< parameters.ext >>")
            echo "export FILES='$FILES'" >> $BASH_ENV
            source $BASH_ENV

  # Install and configure WordPress for end-to-end tests.
  install_wordpress_with_coblocks:
    description: ""
    steps:
      - run:
          name: Update hosts
          command: echo 127.0.0.1 coblocks.test | sudo tee -a /etc/hosts
      - run:
          name: Install WordPress
          command: |
            sudo apt-get update --allow-releaseinfo-change && sudo apt-get install -y subversion default-mysql-client
            sudo -E docker-php-ext-install mysqli
            mkdir -p /tmp/wordpress
            ./vendor/bin/wp core download --path=/tmp/wordpress
            ./vendor/bin/wp config create --dbhost=127.0.0.1 --dbname=coblocks --dbuser=root --dbpass='' --path=/tmp/wordpress
            ./vendor/bin/wp db create --path=/tmp/wordpress
            ./vendor/bin/wp core install --url="http://coblocks.test" --title=CoBlocks --admin_user=admin --admin_password=password --admin_email=test@admin.com --skip-email --path=/tmp/wordpress
            ./vendor/bin/wp post generate --count=5 --path=/tmp/wordpress
      - run:
          name: Install Go theme
          command: |
            ./vendor/bin/wp theme install go --activate --path=/tmp/wordpress
      - run:
          name: Activate CoBlocks
          command: |
            ln -s $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
            ./vendor/bin/wp plugin activate coblocks --path=/tmp/wordpress

  # Enable debug mode for use in E2E tests.
  enable_debug_mode_for_e2e:
    description: ""
    steps:
      - run:
          name: Enable Debug Mode
          command: ./vendor/bin/wp config set WP_DEBUG true --path=/tmp/wordpress

  # Disable the xdebug PHP extension.
  disable_xdebug_php_extension:
    description: ""
    steps:
      - run:
          name: Disable xdebug PHP extension
          command: |
            sudo rm -f /etc/php/*/mods-available/xdebug.ini
            sudo rm -f /etc/php/*/mods-enabled/xdebug.ini
            sudo rm -f /etc/php/*/conf.d/*xdebug.ini
            sudo rm -f /usr/local/etc/php/conf.d/*xdebug.ini

  restore_composer_cache:
    steps:
      - restore_cache:
          keys:
            - composer-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "composer.lock" }}
            - composer-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}
            - composer-deps-{{ .Environment.CACHE_VERSION }}

  restore_yarn_cache:
    steps:
      - restore_cache:
          keys:
            - yarn-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}
            - yarn-deps-{{ .Environment.CACHE_VERSION }}

  restore_update_cypress_cache:
    steps:
      - restore_cache:
          keys:
            - cypress-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - cypress-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}
            - cypress-deps-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Install CyPress Binaries
          command: ./node_modules/.bin/cypress install
      - save_cache:
          key: cypress-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/Cypress

  run_e2e_tests:
    parameters:
      browser:
        type: string
    steps:
      - run:
          name: Run end to end tests (Cypress.io) - << parameters.browser >>
          command: |
            touch cypress.env.json
            echo '{"wpUsername":"admin","wpPassword":"password","testURL":"http://coblocks.test"}' | jq . > cypress.env.json
            if [ "$CIRCLE_BRANCH" == "master" ] || [ "$CIRCLE_BRANCH" == "develop" ] || [ "$CIRCLE_BRANCH" == *"run-all-tests"* ]; then
              ./node_modules/.bin/cypress run --config integrationFolder=./ --browser << parameters.browser >> --record --parallel --group e2e-<< parameters.browser >>
            else
              ./node_modules/.bin/cypress run --config integrationFolder=./ --browser << parameters.browser >> --record --parallel --group e2e-<< parameters.browser >> --spec "$(cat /tmp/specstring | xargs | sed -e 's/ /,/g')"
            fi

  start_wpcli_server:
    steps:
      - run:
          name: Start WPCLI Server
          command: sudo ./vendor/bin/wp server --host=0.0.0.0 --port=80 --allow-root  --path=/tmp/wordpress
          background: true

  wait_for_mysql:
    steps:
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

  setup_e2e_env_var:
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            echo "export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc

  install_mailhog:
    steps:
      - run:
          name: "Install Mailhog"
          command: bash .dev/bin/install-mailhog.sh

  start_mailhog:
    steps:
      - run:
          name: "Start Mailhog"
          command: "MailHog"
          background: true

  setup_spec_files_diff_tree:
    steps:
      - run:
          name: Setup spec files to run based on git diff-tree
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" && "$CIRCLE_BRANCH" != "develop" && "$CIRCLE_BRANCH" != *"run-all-tests"* ]]; then
              bash .dev/bin/setup-test-specs.sh $FILES
            fi

  pre_check_files:
    steps:
      - run:
          name: "Pre-Check files"
          command: |
            if [ -z $FILES ] && [ "$CIRCLE_BRANCH" != "master" ] && [ "$CIRCLE_BRANCH" != "develop" ] && [[ "$CIRCLE_BRANCH" != *"run-all-tests"* ]]; then
              echo "Changes do not require testing."
              circleci-agent step halt
            fi

  run_phpunit_singlesite_coverage_reports:
    steps:
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  install_wordpress_testing_suite:
    steps:
      - run:
          name: "Install WordPress Testing Suite"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks

jobs:

  # 1. Download and cache node and composer dependencies.
  # 2. Build deployable plugin folder.
  # 3. Persist project folder to workspace for other jobs.
  build:
    docker:
      - image: circleci/php:7.3-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - disable_xdebug_php_extension
      - restore_yarn_cache
      - run:
          name: Install Node dependencies
          command: |
            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
            yarn install --frozen-lockfile
      - save_cache:
          key: yarn-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
            - ~/.cache/yarn
      - restore_composer_cache
      - run:
          name: Install Composer dependencies
          command: |
            sudo composer self-update --1
            composer validate --strict
            composer install
      - save_cache:
          key: composer-deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
            - ~/project/vendor
      - run:
          name: Build the plugin
          command: |
            npx wp-scripts build --config .dev/config/webpack.ci.config.js
            npx grunt clean:build copy:build
      - persist_to_workspace:
          root: ~/project
          paths:
            - build
            - dist

  # --------------------------------------------------
  # Code Quality Checks
  # --------------------------------------------------

  # Run phpcs on changed php files only.
  php:
    docker:
      - image: circleci/php:7.3
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - changed_files_with_extension:
          ext: ".php"
      - pre_check_files
      - attach_workspace:
          at: ~/project
      - restore_composer_cache
      - run:
          name: Install Composer v1
          command: sudo composer self-update --1
      - run:
          name: "Linting PHP"
          command: composer run lint $FILES

  # Run stylelint on changed stylesheet files only.
  css:
    docker:
      - image: circleci/node:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - changed_files_with_extension:
          ext: ".scss"
      - pre_check_files
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - run:
          name: "Linting CSS"
          command: yarn lint:css $FILES

  # --------------------------------------------------
  # Unit Testing
  # --------------------------------------------------

  unit_testing_php_56:
    docker:
      - image: circleci/php:5.6
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_composer_cache
      - wait_for_mysql
      - install_wordpress_testing_suite
      - run_phpunit_singlesite_coverage_reports
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  unit_testing_php_73:
    docker:
      - image: circleci/php:7.3.23-apache-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_composer_cache
      - run:
          name: Install Composer v1
          command: sudo composer self-update --1
      - wait_for_mysql
      - install_wordpress_testing_suite
      - run_phpunit_singlesite_coverage_reports
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  unit_testing_php_74:
    docker:
      - image: circleci/php:7.4.15-apache-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          XDEBUG_MODE=coverage
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_composer_cache
      - run:
          name: Install Composer v1
          command: sudo composer self-update --1
      - wait_for_mysql
      - install_wordpress_testing_suite
      - run_phpunit_singlesite_coverage_reports
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  js:
    docker:
      - image: cimg/php:7.3.23-node
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - changed_files_with_extension:
          ext: ".js"
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - run:
          name: "Linting JS"
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              exit 0
            else
              yarn lint:js $FILES
            fi
      - run:
          name: "Test JS and Collect Coverage"
          command: yarn test:js:coverage --maxWorkers=2 --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/artifacts/tests-results/jest
      - store_artifacts:
          path: coverage
          destination: coverage
      - store_test_results:
          path: /tmp/artifacts/tests-results/jest
      - run:
          name: Post coverage comment to GitHub
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              npx @godaddy-wordpress/circleci-coverage-github-reporter
            else
              exit 0
            fi

  # --------------------------------------------------
  # End to End Testing
  # --------------------------------------------------

  e2e_chrome:
    docker:
      - image: circleci/php:7.3.23-node-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    parallelism: 4
    steps:
      - checkout
      - setup_e2e_env_var
      - changed_files_with_extension:
          ext: ".js"
      - setup_spec_files_diff_tree
      - disable_xdebug_php_extension
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - restore_update_cypress_cache
      - restore_composer_cache
      - wait_for_mysql
      - install_wordpress_with_coblocks
      - enable_debug_mode_for_e2e
      - install_mailhog
      - start_mailhog
      - start_wpcli_server
      - run_e2e_tests:
          browser: chrome

  e2e_firefox:
    docker:
      - image: circleci/php:7.3.23-node-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    parallelism: 4
    steps:
      - checkout
      - setup_e2e_env_var
      - changed_files_with_extension:
          ext: ".js"
      - setup_spec_files_diff_tree
      - disable_xdebug_php_extension
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - restore_update_cypress_cache
      - restore_composer_cache
      - wait_for_mysql
      - install_wordpress_with_coblocks
      - enable_debug_mode_for_e2e
      - install_mailhog
      - start_mailhog
      - start_wpcli_server
      - run_e2e_tests:
          browser: firefox

  # --------------------------------------------------
  # Internationalization Processes
  # --------------------------------------------------
  i18n:
    docker:
      - image: circleci/php:7.3-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - add_ssh_keys:
          fingerprints:
            - "14:ee:bc:31:0f:50:7e:fe:8b:56:87:f8:56:db:48:5b"
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - restore_composer_cache
      - disable_xdebug_php_extension
      - run:
          name: Generate the translations
          command: |
            npx grunt update-pot
      - run:
          name: Deploy coblocks.pot/coblocks.json back to GitHub
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            if [[ $GIT_COMMIT_DESC != *"skip i18n"* ]]; then
              git config --global user.email "plugins@godaddy.com"
              git config --global user.name "GoDaddy Translator Bot"
              git checkout HEAD -- composer.lock
              git checkout HEAD -- yarn.lock
              git add languages/coblocks.json
              git add languages/coblocks.pot
              git status
              git commit -m "[skip ci] Update coblocks.pot/coblocks.json files"
              git reset --hard
              git pull --rebase
              git push origin master --quiet
            fi

  canary-release:
    docker:
      - image: circleci/golang:latest-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - restore_composer_cache
      - run:
          name: Install PHP
          command: sudo apt-get install php libapache2-mod-php php-mbstring php-xml php-curl
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - disable_xdebug_php_extension
      - run:
          name: Install Composer
          command: |
            wget https://raw.githubusercontent.com/composer/getcomposer.org/master/web/installer -O composer-setup.php
            php composer-setup.php --version=1.10.16
            php -r "unlink('composer-setup.php');"
            sudo mv composer.phar /usr/local/bin/composer
      - run:
          name: Install ghr
          command: |
            go get -u github.com/tcnksm/ghr
      - run:
          name: Build the plugin
          command: |
            mkdir -p /tmp/artifacts
            npx grunt build
            COBLOCKS_VERSION_LINE=$(awk '/\* Version:/{ print NR; exit }' build/coblocks/class-coblocks.php)
            COBLOCKS_COMMIT_HASH=$(git rev-parse --verify HEAD | head -c 7)
            sed -i -e "${COBLOCKS_VERSION_LINE}s/$/-${COBLOCKS_COMMIT_HASH}/" build/coblocks/class-coblocks.php
            npm run json2po
            npm run po2mo
            npm run po2jed
            rm -f languages/*.po languages/*.pot languages/coblocks.json
            find languages/ -type f ! -name 'coblocks*' -exec rm {} \;
            cp -r languages/ build/coblocks/languages/
            cd build && zip -r coblocks-canary.zip coblocks
            mv coblocks-canary.zip /tmp/artifacts/coblocks-canary.zip
      - run:
          name: Create a canary release on GitHub
          command: ghr -t ${GH_ACCESS_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "Latest build of the master branch. This bleeding edge version is for testing purposes only and should not be used in production." -delete -prerelease -replace canary /tmp/artifacts/coblocks-canary.zip
      - deploy:
          name: Deploy CoBlocks canary to the WPNUX site
          command: |
            curl https://wpnux.godaddy.com/v2/webhook-install-canary.php \
            -H 'Content-Type: application/json' \
            -H "X-Authorization: Bearer ${WPNUX_SITE_X_AUTHORIZATION}" \
            -d '[ "coblocks" ]'

  # --------------------------------------------------
  # Plugin Deployment to WordPress.org
  # --------------------------------------------------
  deploy:
    docker:
      - image: circleci/golang:latest-node-browsers-legacy
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_yarn_cache
      - restore_composer_cache
      - run:
          name: Install SVN
          command: sudo apt-get update && sudo apt-get install subversion
      - run:
          name: Install PHP
          command: sudo apt-get install php libapache2-mod-php php-mbstring php-xml php-curl
      - disable_xdebug_php_extension
      - run:
          name: Install Composer
          command: |
            wget https://raw.githubusercontent.com/composer/getcomposer.org/master/web/installer -O composer-setup.php
            php composer-setup.php --version=1.10.16
            php -r "unlink('composer-setup.php');"
            sudo mv composer.phar /usr/local/bin/composer
      - run:
          name: Install ghr
          command: |
            go get -u github.com/tcnksm/ghr
      - run:
          name: Build the plugin
          command: |
            mkdir -p /tmp/artifacts
            npx grunt build
            npx grunt compress
            mv build/*.zip /tmp/artifacts
      - deploy:
          name: Deploy the plugin
          command: bash .dev/bin/deploy-plugin.sh
      - store_artifacts:
          path: /tmp/artifacts
